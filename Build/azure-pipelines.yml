# SSDT Building and testing pipeline
#
# The project is based on the SSDT-With-tSQLt-Template from https://github.com/sanderstad/SSDT-With-tSQLt-Template
#
# The container image used is build from
# - SQL Server 2017 CU16 image
# - SQL Server 2019 GA image

variables:
  configuration: release
  sqlinstance: localhost
  database: UnitTesting
  artifactname: Database

trigger:
- development
- main

stages:
- stage: Build

  jobs:
    - job: 'Solution'

      pool:
        vmImage: vs2017-win2016

      steps:
      - task: VSBuild@1
        displayName: 'Build UnitTesting-Data project'
        inputs:
          solution: UnitTesting-Data/UnitTesting-Data.sqlproj
          configuration: $(configuration)

      - task: VSBuild@1
        displayName: 'Build UnitTesting-Tests project'
        inputs:
          solution: UnitTesting-Tests/UnitTesting-Tests.sqlproj
          configuration: $(configuration)

      - task: CopyFiles@2
        displayName: "Copy files to artifact directory"
        inputs:
          Contents: |
            **\$(database)-Data\bin\$(configuration)\*.*
            **\$(database)-Tests\bin\$(configuration)\*.*
            **\*.publish.xml
          TargetFolder: '$(Build.ArtifactStagingDirectory)'
          FlattenFolders: true
          OverWrite: true

      - task: PublishBuildArtifacts@1
        displayName: 'Publish artifact'
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)'
          ArtifactName: $(artifactname)
          publishLocation: 'Container'
- stage: Test
  displayName: 'Unit Testing'
  jobs:
    - job: 'Linux2019'
      displayName: 'SQL Server 2019'
      variables:
        variables:
        dockerimage: 'mcr.microsoft.com/mssql/server:2019-GA-ubuntu-16.04'
        dockerpublishport: 1433
        dockername: sql2019
        dockersqlpw: 'MyP@ssw0rd12345'
        dacpacpath: /var/opt/cicd
        testresultpath: $(Build.Repository.LocalPath)/build/sql2019
        datadacpacfile: $(dacpacpath)/$(database)-Data.dacpac
        testdacpacfile: $(dacpacpath)/$(database)-Tests.dacpac
        datapublishfile: $(dacpacpath)/$(database)-Data.publish.xml
        testpublishfile: $(dacpacpath)/$(database)-Tests.publish.xml

      pool:
        vmImage: ubuntu-20.04

      steps:
      - task: PowerShell@2
        displayName: 'Prerequisites'
        inputs:
          filePath: '$(Build.Repository.LocalPath)/Build/azure-prerequisites.ps1'

      - task: DownloadBuildArtifacts@0
        displayName: 'Dowload Artifacts'
        inputs:
          buildType: 'current'
          downloadType: 'specific'
          downloadPath: '$(System.ArtifactsDirectory)'
      - task: Bash@3
        displayName: 'Install sqlpackage'
        inputs:
          targetType: 'inline'
          script: |
            echo 'Creating sqlpackage dir'
            sudo mkdir $(Build.Repository.LocalPath)/sqlpackage

            # Install sqlpackage
            echo 'Downloading sqlpackage'
            sudo wget -q -O $(Build.Repository.LocalPath)/sqlpackage/sqlpackage.zip https://go.microsoft.com/fwlink/?linkid=2108814

            echo 'Extracting sqlpackage.zip'
            sudo unzip -qq $(Build.Repository.LocalPath)/sqlpackage/sqlpackage.zip -d /$(Build.Repository.LocalPath)/sqlpackage

            echo 'Changing sqlpackage permissions'
            sudo chmod +x $(Build.Repository.LocalPath)/sqlpackage/sqlpackage

      - task: Bash@3
        displayName: 'Start SQL Server Container'
        inputs:
          targetType: 'inline'
          script: |
            docker run --name $(dockername) \
              -e "ACCEPT_EULA=Y" \
              -e "SA_PASSWORD=$(dockersqlpw)" \
              -p $(dockerpublishport):1433 \
              --volume $(System.ArtifactsDirectory)/$(artifactname):/var/opt/cicd \
              --volume $(Build.Repository.LocalPath)/sqlpackage:/var/opt/sqlpackage \
              -d $(dockerimage)

      - task: Bash@3
        displayName: 'Publish Data DACPAC'
        inputs:
          targetType: 'inline'
          script: |
            echo 'Get files in directory'
            sudo docker exec $(dockername) bash -c 'ls -la $(dacpacpath)'
            sudo docker exec $(dockername) bash -c '/var/opt/sqlpackage/sqlpackage /a:Publish /tsn:localhost /tdn:$(database) /tu:sa /tp:"$(dockersqlpw)" /sf:$(datadacpacfile) /pr:$(datapublishfile) /p:IncludeCompositeObjects=true'

      - task: Bash@3
        displayName: 'Publish Test DACPAC'
        inputs:
          targetType: 'inline'
          script: |
            echo 'Get files in directory'
            docker exec $(dockername) bash -c 'ls -la $(dacpacpath)'
            docker exec $(dockername) bash -c '/var/opt/sqlpackage/sqlpackage /a:Publish /tsn:localhost /tdn:$(database) /tu:sa /tp:"$(dockersqlpw)" /sf:$(testdacpacfile) /pr:$(testpublishfile) /p:IncludeCompositeObjects=true'

      - task: PowerShell@2
        displayName: 'Run Tests'
        inputs:
          filePath: '$(Build.Repository.LocalPath)/Build/azure-validate.ps1'
          arguments: '-SqlInstance "$(sqlinstance)" -SqlPassword "$(dockersqlpw)" -Database $(database) -TestResultPath $(testresultpath) -EnableException'

      - task: PublishTestResults@2
        inputs:
          testResultsFormat: 'JUnit'
          testResultsFiles: '**/TEST-*.xml'
          failTaskOnFailedTests: true
          testRunTitle: 'SQL Server 2019'
          
- stage: Integration
  displayName: 'Integration'

  jobs:
    - job: 'Deploy2019'
      displayName: 'Deploy SQL Server 2019'
      variables:
        variables:
        agentpool: 'Azure DevOps Duet'
        dacpacpath: $(System.ArtifactsDirectory)/$(artifactname)
        datadacpacfile: $(database)-Data.dacpac
        datapublishfile: $(dacpacpath)/$(database)-Data.publish.xml


      pool: $(agentpool)
        
      steps:
      - task: DownloadBuildArtifacts@0
        displayName: 'Dowload Artifacts'
        inputs:
          buildType: 'current'
          downloadType: 'specific'
          downloadPath: '$(System.ArtifactsDirectory)'

      - task: SqlDacpacDeploymentOnMachineGroup@0
        displayName: 'Install DACPAC'
        inputs:
          TaskType: 'dacpac'
          DacpacFile: '$(dacpacpath)/$(datadacpacfile)'
          TargetMethod: 'server'
          ServerName: 'localhost,1443'
          DatabaseName: 'SQLSatOslo-Integration'
          AuthScheme: 'sqlServerAuthentication'
          SqlUsername: 'sa'
          SqlPassword: $(sqlsapw)
          PublishProfile: $(datapublishfile)
          AdditionalArguments: '/p:IncludeCompositeObjects=true'

- stage: Staging
  displayName: 'Staging'

  jobs:
    - job: 'Deploy2019'
      displayName: 'Deploy SQL Server 2019'
      variables:
        variables:
        agentpool: 'Azure DevOps Duet'
        dacpacpath: $(System.ArtifactsDirectory)/$(artifactname)
        datadacpacfile: $(database)-Data.dacpac
        datapublishfile: $(dacpacpath)/$(database)-Data.publish.xml


      pool: $(agentpool)
        
      steps:
      - task: DownloadBuildArtifacts@0
        displayName: 'Dowload Artifacts'
        inputs:
          buildType: 'current'
          downloadType: 'specific'
          downloadPath: '$(System.ArtifactsDirectory)'

      - task: SqlDacpacDeploymentOnMachineGroup@0
        displayName: 'Install DACPAC'
        inputs:
          TaskType: 'dacpac'
          DacpacFile: '$(dacpacpath)/$(datadacpacfile)'
          TargetMethod: 'server'
          ServerName: 'localhost,1444'
          DatabaseName: 'SQLSatOslo-Staging'
          AuthScheme: 'sqlServerAuthentication'
          SqlUsername: 'sa'
          SqlPassword: $(sqlsapw)
          PublishProfile: $(datapublishfile)
          AdditionalArguments: '/p:IncludeCompositeObjects=true'

- stage: Production
  displayName: 'Production'

  jobs:
    - job: 'Deploy2019'
      displayName: 'Deploy SQL Server 2019'
      variables:
        variables:
        agentpool: 'Azure DevOps Duet'
        dacpacpath: $(System.ArtifactsDirectory)/$(artifactname)
        datadacpacfile: $(database)-Data.dacpac
        datapublishfile: $(dacpacpath)/$(database)-Data.publish.xml


      pool: $(agentpool)
        
      steps:
      - task: DownloadBuildArtifacts@0
        displayName: 'Dowload Artifacts'
        inputs:
          buildType: 'current'
          downloadType: 'specific'
          downloadPath: '$(System.ArtifactsDirectory)'

      - task: SqlDacpacDeploymentOnMachineGroup@0
        displayName: 'Install DACPAC on Prod1'
        inputs:
          TaskType: 'dacpac'
          DacpacFile: '$(dacpacpath)/$(datadacpacfile)'
          TargetMethod: 'server'
          ServerName: 'localhost,1445'
          DatabaseName: 'SQLSatOslo-Prod1'
          AuthScheme: 'sqlServerAuthentication'
          SqlUsername: 'sa'
          SqlPassword: $(sqlsapw)
          PublishProfile: $(datapublishfile)
          AdditionalArguments: '/p:IncludeCompositeObjects=true'


      - task: SqlDacpacDeploymentOnMachineGroup@0
        displayName: 'Install DACPAC on Prod2'
        inputs:
          TaskType: 'dacpac'
          DacpacFile: '$(dacpacpath)/$(datadacpacfile)'
          TargetMethod: 'server'
          ServerName: 'localhost,1445'
          DatabaseName: 'SQLSatOslo-Prod2'
          AuthScheme: 'sqlServerAuthentication'
          SqlUsername: 'sa'
          SqlPassword: $(sqlsapw)
          PublishProfile: $(datapublishfile)
          AdditionalArguments: '/p:IncludeCompositeObjects=true'

- stage: GitHub
  displayName: 'Sync to GitHub'
  dependsOn: Build

  jobs:
    - job: 'SyncGit'
      displayName: 'Sync Git to GitHub'
      variables:
        variables:
        agentpool: 'Azure DevOps Duet'
        artifactsfolder: 'D:\Published artifacts'

      pool: $(agentpool)
        
      steps:
      - checkout: self
        persistCredentials: true

      - task: DownloadBuildArtifacts@0
        displayName: 'Dowload Artifacts'
        inputs:
          buildType: 'current'
          downloadType: 'specific'
          downloadPath: '$(System.ArtifactsDirectory)'

      - task: CopyFiles@2
        displayName: "Copy files to special artifact directory"
        inputs:
          Contents: |
            $(System.ArtifactsDirectory)\*.*
          TargetFolder: '$(artifactsfolder)'

      - task: PowerShell@2
        displayName: 'Run git PowerShell script'
        inputs:
          filePath: '$(System.DefaultWorkingDirectory)\scripts\git.ps1'